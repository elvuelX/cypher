buildscript {
    ext {
        assertjVersion = '3.8.0'
        guavaVersion = '22.0'
        junitVersion = '4.12'
        neo4jVersion = '3.2.9'
        scalaVersion = '2.11'
        scalaPatchVersion = '12'
        springBootVersion = '1.5.6.RELEASE'
        tinkerpopVersion = '3.3.1'
    }

    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.8.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.4.5'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.3'
        classpath 'com.kncept.junit5.reporter:junit-reporter:1.0.2'
    }
}

allprojects {
    group 'org.opencypher.gremlin'
    version '1.0-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.diffplug.gradle.spotless'

    repositories {
        mavenCentral()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs += '-Xlint:unchecked'
        options.compilerArgs += '-Xlint:deprecation'
    }

    dependencies {
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.assertj:assertj-core:${assertjVersion}"
        testCompile 'org.mockito:mockito-all:1.10.19'
    }

    spotless {
        format 'misc', {
            target '**/*.java', '**/*.scala'
            endWithNewline()
            trimTrailingWhitespace()
            licenseHeaderFile "${rootDir}/license-header.txt", 'package '
        }
        java {
            removeUnusedImports()
        }
        scala {
            scalafmt('1.4.0').configFile("${rootDir}/.scalafmt.conf")
        }
    }
}

project(':translation') {
    apply plugin: 'scala'

    sourceSets.main.scala.srcDir "src/main/java"
    sourceSets.main.java.srcDirs = []

    dependencies {
        compile "org.apache.tinkerpop:gremlin-core:${tinkerpopVersion}"
        compile "org.scala-lang:scala-library:${scalaVersion}.${scalaPatchVersion}"
        compile "org.scala-lang.modules:scala-java8-compat_${scalaVersion}:0.8.0"
        compile "org.neo4j:neo4j-cypher-frontend-3.2:${neo4jVersion}"
    }
}

project(':plugin:plugin-common') {
    dependencies {
        compile project(':translation')

        compile("org.apache.tinkerpop:gremlin-server:${tinkerpopVersion}") {
            exclude group: 'org.codehaus.groovy'
        }
    }
}

project(':plugin:server-plugin') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':plugin:plugin-common')
    }
}

project(':plugin:console-plugin') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':plugin:plugin-common')

        compileOnly "org.apache.tinkerpop:gremlin-console:${tinkerpopVersion}"
    }
}

project(':testware:testware-common') {
    dependencies {
        compile project(':plugin:server-plugin')

        compile "junit:junit:${junitVersion}"
        compile "org.assertj:assertj-core:${assertjVersion}"
        compile 'ch.qos.logback:logback-classic:1.2.3'
        compile "com.google.guava:guava:${guavaVersion}"
        compile "org.apache.tinkerpop:gremlin-server:${tinkerpopVersion}"
        compile "org.apache.tinkerpop:tinkergraph-gremlin:${tinkerpopVersion}"
    }
}

project(':testware:integration-tests') {
    dependencies {
        testCompile project(':testware:testware-common')
    }
}

project(':testware:performance-tests') {
    apply plugin: 'me.champeau.gradle.jmh'

    dependencies {
        jmh project(':plugin:plugin-common')
        jmh "com.google.guava:guava:${guavaVersion}"
    }

    jmh {
        jmhVersion = '1.20'
        benchmarkMode = ['avgt']
        failOnError = true
        fork = 1
        iterations = 5
        timeUnit = 'ms'
        warmupIterations = 1
    }
}

project(':testware:tck') {
    apply plugin: 'scala'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'com.kncept.junit5.reporter'

    tasks['junitHtmlReport'].onlyIf { project.hasProperty("tck") }
    junitPlatformTest.onlyIf { project.hasProperty("tck") }
    junitPlatformTest.finalizedBy 'junitHtmlReport'

    test {
        reports {
            junitXml.enabled = false
            html.enabled = true
        }
    }

    sourceSets.main.resources.srcDirs = ["src/main/resources", "../../../config"]
    sourceSets.test.resources.srcDirs = ["src/test/resources", "../../../config"]

    dependencies {
        compile project(':testware:testware-common')

        testCompile "org.scala-lang:scala-library:${scalaVersion}.${scalaPatchVersion}"
        testCompile "org.scala-lang.modules:scala-java8-compat_${scalaVersion}:0.8.0"
        testCompile 'org.junit.jupiter:junit-jupiter-engine:5.0.2'
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.2'
        testCompile 'org.opencypher:tck-api:1.0.0-M09'
    }
}
