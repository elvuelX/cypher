buildscript {
    ext {
        assertjVersion = '3.8.0'
        guavaVersion = '22.0'
        junitVersion = '4.12'
        neo4jVersion = '3.2.9'
        scalaVersion = '2.11'
        scalaPatchVersion = '12'
        springBootVersion = '1.5.6.RELEASE'
        tinkerpopVersion = '3.3.1'
    }

    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.8.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.4.5'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.3'
        classpath 'com.kncept.junit5.reporter:junit-reporter:1.0.2'
    }
}

allprojects {
    group 'org.opencypher.gremlin'
    version '1.0-SNAPSHOT'
}

task gitHooks(type: Copy) {
    from "${rootDir}/hooks"
    into "${rootDir}/.git/hooks"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.diffplug.gradle.spotless'

    repositories {
        mavenCentral()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs += '-Xlint:deprecation,unchecked'
        options.compilerArgs += '-Werror'
    }
    tasks.withType(ScalaCompile) {
        scalaCompileOptions.additionalParameters = [
            '-Xfatal-warnings'
        ]
    }

    dependencies {
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.assertj:assertj-core:${assertjVersion}"
        testCompile 'org.mockito:mockito-all:1.10.19'
    }

    spotless {
        format 'misc', {
            target '**/*.java', '**/*.scala'
            endWithNewline()
            trimTrailingWhitespace()
            licenseHeaderFile "${rootDir}/license-header.txt", 'package '
        }
        java {
            importOrder ''
            removeUnusedImports()
        }
        scala {
            scalafmt('1.4.0').configFile("${rootDir}/.scalafmt.conf")
        }
    }

    build.dependsOn gitHooks
}

project(':translation') {
    apply plugin: 'scala'

    sourceSets.main.scala.srcDir "src/main/java"
    sourceSets.main.java.srcDirs = []

    dependencies {
        compile "org.apache.tinkerpop:gremlin-core:${tinkerpopVersion}"
        compile "org.scala-lang:scala-library:${scalaVersion}.${scalaPatchVersion}"
        compile "org.scala-lang.modules:scala-java8-compat_${scalaVersion}:0.8.0"
        compile "org.neo4j:neo4j-cypher-frontend-3.2:${neo4jVersion}"
    }
}

project(':tinkerpop:tinkerpop-common') {
    dependencies {
        compile project(':translation')

        compile("org.apache.tinkerpop:gremlin-server:${tinkerpopVersion}") {
            exclude group: 'org.codehaus.groovy'
        }
    }
}

project(':tinkerpop:cypher-gremlin-server-client') {
    dependencies {
        compile project(':tinkerpop:tinkerpop-common')

        compile("org.apache.tinkerpop:gremlin-driver:${tinkerpopVersion}") {
            exclude group: 'org.codehaus.groovy'
        }
    }
}

project(':tinkerpop:cypher-gremlin-server-plugin') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':tinkerpop:tinkerpop-common')
    }
}

project(':tinkerpop:cypher-gremlin-console-plugin') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':tinkerpop:cypher-gremlin-server-client')

        compileOnly "org.apache.tinkerpop:gremlin-console:${tinkerpopVersion}"
    }
}

project(':tinkerpop:cypher-gremlin-neo4j-driver') {
    dependencies {
        compile project(':tinkerpop:cypher-gremlin-server-client')
        compile 'org.neo4j.driver:neo4j-java-driver:1.4.4'
    }
}

project(':testware:testware-common') {
    dependencies {
        compile project(':tinkerpop:cypher-gremlin-server-client')
        compile project(':tinkerpop:cypher-gremlin-server-plugin')
        compile project(':tinkerpop:cypher-gremlin-console-plugin')

        compile "junit:junit:${junitVersion}"
        compile "org.assertj:assertj-core:${assertjVersion}"
        compile 'ch.qos.logback:logback-classic:1.2.3'
        compile "com.google.guava:guava:${guavaVersion}"
        compile "org.apache.tinkerpop:gremlin-server:${tinkerpopVersion}"
        compile "org.apache.tinkerpop:gremlin-console:${tinkerpopVersion}"
        compile "org.apache.tinkerpop:tinkergraph-gremlin:${tinkerpopVersion}"
    }
}

project(':testware:integration-tests') {
    dependencies {
        testCompile project(':testware:testware-common')
        testCompile project(':tinkerpop:cypher-gremlin-neo4j-driver')

        testCompile 'com.github.stefanbirkner:system-rules:1.17.1'
        testCompile 'org.awaitility:awaitility:3.0.0'
    }

    task('testGremlinGroovyTranslation', type: Test) {
        systemProperty 'translate', 'gremlin'

        useJUnit {
            include 'org/opencypher/gremlin/queries/**'

            excludeCategories 'org.opencypher.gremlin.groups.SkipWithGremlinGroovy'
        }

    }

    check.dependsOn testGremlinGroovyTranslation
}

project(':testware:performance-tests') {
    apply plugin: 'me.champeau.gradle.jmh'

    dependencies {
        jmh project(':tinkerpop:cypher-gremlin-server-client')
        jmh "com.google.guava:guava:${guavaVersion}"
    }

    jmh {
        jmhVersion = '1.20'
        benchmarkMode = ['avgt']
        failOnError = true
        fork = 1
        iterations = 5
        timeUnit = 'ms'
        warmupIterations = 1
    }
}

project(':testware:tck') {
    apply plugin: 'scala'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'com.kncept.junit5.reporter'

    tasks['junitHtmlReport'].onlyIf { project.getGradle().getStartParameter().getTaskNames().contains("tck") }
    junitPlatformTest.onlyIf { project.getGradle().getStartParameter().getTaskNames().contains("tck") }
    junitPlatformTest.finalizedBy 'junitHtmlReport'

    task('tck', type: Exec, dependsOn: 'junitPlatformTest') {

    }

    task('tckRegression', type: JavaExec) {
        main = 'org.opencypher.gremlin.tck.regression.TckResultsComparator'
        classpath = sourceSets.test.runtimeClasspath
    }

    task('tckSaveReport', type: Copy) {
        from 'build/test-results/junit-platform/TEST-junit-jupiter.xml'
        into 'build/test-results/junit-platform/'
        rename { String fileName ->
            fileName.replace('.xml', '-before.xml')
        }
    }

    dependencies {
        compile project(':testware:testware-common')

        testCompile "org.scala-lang:scala-library:${scalaVersion}.${scalaPatchVersion}"
        testCompile "org.scala-lang.modules:scala-java8-compat_${scalaVersion}:0.8.0"
        testCompile 'org.junit.jupiter:junit-jupiter-engine:5.0.2'
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.2'
        testCompile 'org.opencypher:tck-api:1.0.0-M09'
        testCompile 'org.freemarker:freemarker:2.3.23'
        testCompile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.0"
    }
}
